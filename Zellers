//Zeller's Congruence

import java.util.Scanner;

public class Zellers // Such an awesome convention dedicated to days of the freaking week!
{
	public static void main (String [] args) 
	{
	}
	public static String returnDate (String sday, String smonth, String syear)
	{
		// Array[0] will never occur so buffer all arrays with an empty string/int
		String[] daysofWeek = {"","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"};
		//Zeller's Congruence works on the algorithm that January and February are 13 and 14, so buffer these arrays accordingly
		int[] daysInMonth = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29};
		String [] monthsOfYear = {"","January","February","March","April","May","June","July","August","Sept.","Oct.","Nov.","Dec.","January","February"};

		System.out.print("Enter the calendar date 1 - 31 : ");
		int day = Integer.parseInt(sday);
		
		System.out.print("Enter the Month: (between 1-12, 1=Jan, 2=Feb etc...): ");
		int month = Integer.parseInt(smonth);

		System.out.print("Enter the year: ");
		
		int year = Integer.parseInt(syear);

	
	 //validations and recalculations
		boolean isLeap;
		if((year % 4) == 0 && (year % 100 != 0 || year % 400 == 0))
			isLeap = true;
		else
			isLeap = false;
		//via the algorithm on wikipedia it treats january as 13 and february as 14
		if (month == 1){
		month=13;
		year -= 1;}
		else if (month == 2){
		month=14;
		year -= 1;}
		
		// validation (valid dates)
		if ( year < 1 || month < 1 || day < 1 || day > daysInMonth[month])
		{
			System.out.printf(String.format("%02d/%02d/%04d is an invalid date",day,month,year));
			System.exit(1);
		}
		//valid years
		else if (day == 29 && month == 2 && !isLeap)
		{
			System.out.printf(String.format("%02d/%02d/%04d is 29 Feb, but not a Leap Year",day,month,year));
			System.exit(1);
		}
	
		//Zeller's congruence
		int q = day;
		int K =  year % 100;
		int m = month;
		int J = year/100;
		double h = (q + ((26*(m + 1)) / 10) + K + (K / 4) +(J / 4) + (5 * J)) % 7;
		int d = (int)(h + 5) % 7 + 1; // ISO standard
		// the Day of the Month is
		System.out.println("The date is (and Day):" + daysofWeek[d] + " " + monthsOfYear[m] + " " + year);
		String validDate = day+"/"+month+"/"+year;
		
		return validDate;
	}
	 
}
	 
